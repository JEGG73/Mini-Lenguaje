
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\007\000\002\005" +
    "\005\000\002\005\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\005\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\004\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\005\000\002\026\006\000\002\026" +
    "\005\000\002\026\006\000\002\026\006\000\002\026\006" +
    "\000\002\026\006\000\002\027\005\000\002\027\003\000" +
    "\002\006\005\000\002\006\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\011\000\002\006\015\000\002\010" +
    "\005\000\002\011\005\000\002\011\003\000\002\012\011" +
    "\000\002\012\007\000\002\013\011\000\002\030\003\000" +
    "\002\030\006\000\002\030\002\000\002\032\003\000\002" +
    "\032\004\000\002\031\005\000\002\014\007\000\002\015" +
    "\011\000\002\016\013\000\002\017\006\000\002\017\003" +
    "\000\002\017\002\000\002\020\003\000\002\020\002\000" +
    "\002\021\012\000\002\021\011\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\002" +
    "\000\002\022\003\000\002\022\005\000\002\023\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\024" +
    "\004\000\002\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\004\004\001\002\000\004\064\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\075\011\001\002\000\004\005\340\001\002\000" +
    "\116\003\037\006\015\007\025\010\063\011\035\012\uffa1" +
    "\013\033\014\032\016\014\017\023\020\057\021\072\022" +
    "\022\023\040\024\047\025\061\026\041\027\026\030\054" +
    "\031\020\032\051\033\036\034\067\046\044\055\046\056" +
    "\055\064\024\065\071\066\013\067\042\070\027\071\064" +
    "\075\011\076\062\100\034\101\043\102\053\104\050\001" +
    "\002\000\120\003\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\046" +
    "\ufff9\055\ufff9\056\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9" +
    "\070\ufff9\071\ufff9\075\ufff9\076\ufff9\100\ufff9\101\ufff9\102" +
    "\ufff9\104\ufff9\001\002\000\064\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\072\uffd2\074\uffd2\076\uffd2\077" +
    "\uffd2\100\uffd2\103\uffd2\001\002\000\004\071\321\001\002" +
    "\000\006\011\320\012\uffa5\001\002\000\120\003\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\046\ufff8\055\ufff8\056\ufff8\064" +
    "\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\075\ufff8" +
    "\076\ufff8\100\ufff8\101\ufff8\102\ufff8\104\ufff8\001\002\000" +
    "\006\064\264\073\265\001\002\000\004\071\261\001\002" +
    "\000\116\003\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\046\ufffc\055\ufffc" +
    "\056\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\075\ufffc\076\ufffc\100\ufffc\101\ufffc\102\ufffc\104\ufffc" +
    "\001\002\000\012\064\uff9a\073\uff9a\075\uff9a\077\uff9a\001" +
    "\002\000\004\071\243\001\002\000\074\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\232" +
    "\056\227\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\071" +
    "\230\072\uffd4\073\231\074\uffd4\076\uffd4\077\uffd4\100\uffd4" +
    "\103\uffd4\001\002\000\006\011\226\012\uffa4\001\002\000" +
    "\012\064\uff98\073\uff98\075\uff98\077\uff98\001\002\000\064" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\072" +
    "\uffd0\074\uffd0\076\uffd0\077\uffd0\100\uffd0\103\uffd0\001\002" +
    "\000\120\003\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\046\ufff4" +
    "\055\ufff4\056\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070" +
    "\ufff4\071\ufff4\075\ufff4\076\ufff4\100\ufff4\101\ufff4\102\ufff4" +
    "\104\ufff4\001\002\000\120\003\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\046\ufff5\055\ufff5\056\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\071\ufff5\075\ufff5\076\ufff5\100\ufff5" +
    "\101\ufff5\102\ufff5\104\ufff5\001\002\000\004\071\220\001" +
    "\002\000\036\030\054\031\020\032\051\033\036\034\067" +
    "\046\044\055\046\056\055\064\024\065\071\066\013\067" +
    "\042\070\027\071\064\001\002\000\120\003\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\046\uffef\055\uffef\056\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\075\uffef\076" +
    "\uffef\100\uffef\101\uffef\102\uffef\104\uffef\001\002\000\004" +
    "\012\uffa2\001\002\000\064\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\072\uffcf\074\uffcf\076\uffcf\077\uffcf" +
    "\100\uffcf\103\uffcf\001\002\000\004\100\215\001\002\000" +
    "\012\064\uff99\073\uff99\075\uff99\077\uff99\001\002\000\012" +
    "\064\uff9c\073\uff9c\075\uff9c\077\uff9c\001\002\000\064\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\072\uffd1" +
    "\074\uffd1\076\uffd1\077\uffd1\100\uffd1\103\uffd1\001\002\000" +
    "\120\003\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\046\ufff3\055" +
    "\ufff3\056\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3" +
    "\071\ufff3\075\ufff3\076\ufff3\100\ufff3\101\ufff3\102\ufff3\104" +
    "\ufff3\001\002\000\036\030\054\031\020\032\051\033\036" +
    "\034\067\046\044\055\046\056\055\064\024\065\071\066" +
    "\013\067\042\070\027\071\064\001\002\000\004\012\172" +
    "\001\002\000\004\064\171\001\002\000\012\064\uff9d\073" +
    "\uff9d\075\uff9d\077\uff9d\001\002\000\004\100\170\001\002" +
    "\000\004\071\165\001\002\000\120\003\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa" +
    "\033\ufffa\034\ufffa\046\ufffa\055\ufffa\056\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\075\ufffa\076\ufffa" +
    "\100\ufffa\101\ufffa\102\ufffa\104\ufffa\001\002\000\120\003" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\046\ufff2\055\ufff2\056" +
    "\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2" +
    "\075\ufff2\076\ufff2\100\ufff2\101\ufff2\102\ufff2\104\ufff2\001" +
    "\002\000\004\071\162\001\002\000\004\064\161\001\002" +
    "\000\116\003\037\006\015\007\025\010\063\011\035\012" +
    "\uffa1\013\033\014\032\016\014\017\023\020\057\021\072" +
    "\022\022\023\040\024\047\025\061\026\041\027\026\030" +
    "\054\031\020\032\051\033\036\034\067\046\044\055\046" +
    "\056\055\064\024\065\071\066\013\067\042\070\027\071" +
    "\064\075\011\076\160\100\034\101\043\102\053\104\050" +
    "\001\002\000\004\071\153\001\002\000\120\003\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\046\ufff6\055\ufff6\056\ufff6\064" +
    "\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\075\ufff6" +
    "\076\ufff6\100\ufff6\101\ufff6\102\ufff6\104\ufff6\001\002\000" +
    "\012\064\uff9b\073\uff9b\075\uff9b\077\uff9b\001\002\000\122" +
    "\003\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\046\ufffe" +
    "\055\ufffe\056\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070" +
    "\ufffe\071\ufffe\075\ufffe\076\ufffe\100\ufffe\101\ufffe\102\ufffe" +
    "\104\ufffe\001\002\000\006\011\152\012\uffa3\001\002\000" +
    "\036\030\054\031\020\032\051\033\036\034\067\046\044" +
    "\055\046\056\055\064\024\065\071\066\013\067\042\070" +
    "\027\071\064\001\002\000\120\003\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\046\ufffb\055\ufffb\056\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\075\ufffb\076\ufffb\100" +
    "\ufffb\101\ufffb\102\ufffb\104\ufffb\001\002\000\120\003\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7\055\ufff7\056\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\075" +
    "\ufff7\076\ufff7\100\ufff7\101\ufff7\102\ufff7\104\ufff7\001\002" +
    "\000\064\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\072\uffce\074\uffce\076\uffce\077\uffce\100\uffce\103\uffce" +
    "\001\002\000\052\036\113\037\117\040\120\041\111\042" +
    "\112\043\107\044\077\045\103\047\106\050\121\051\100" +
    "\052\105\053\114\054\102\057\101\060\116\061\122\062" +
    "\110\063\115\100\147\001\002\000\064\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\063\uffd3\072\uffd3\074\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\103\uffd3\001\002\000\004\075\011" +
    "\001\002\000\004\020\074\001\002\000\004\071\075\001" +
    "\002\000\036\030\054\031\020\032\051\033\036\034\067" +
    "\046\044\055\046\056\055\064\024\065\071\066\013\067" +
    "\042\070\027\071\064\001\002\000\052\036\113\037\117" +
    "\040\120\041\111\042\112\043\107\044\077\045\103\047" +
    "\106\050\121\051\100\052\105\053\114\054\102\057\101" +
    "\060\116\061\122\062\110\063\115\072\104\001\002\000" +
    "\036\030\054\031\020\032\051\033\036\034\067\046\044" +
    "\055\046\056\055\064\024\065\071\066\013\067\042\070" +
    "\027\071\064\001\002\000\036\030\054\031\020\032\051" +
    "\033\036\034\067\046\044\055\046\056\055\064\024\065" +
    "\071\066\013\067\042\070\027\071\064\001\002\000\036" +
    "\030\054\031\020\032\051\033\036\034\067\046\044\055" +
    "\046\056\055\064\024\065\071\066\013\067\042\070\027" +
    "\071\064\001\002\000\036\030\054\031\020\032\051\033" +
    "\036\034\067\046\044\055\046\056\055\064\024\065\071" +
    "\066\013\067\042\070\027\071\064\001\002\000\036\030" +
    "\054\031\020\032\051\033\036\034\067\046\044\055\046" +
    "\056\055\064\024\065\071\066\013\067\042\070\027\071" +
    "\064\001\002\000\004\100\141\001\002\000\036\030\054" +
    "\031\020\032\051\033\036\034\067\046\044\055\046\056" +
    "\055\064\024\065\071\066\013\067\042\070\027\071\064" +
    "\001\002\000\036\030\054\031\020\032\051\033\036\034" +
    "\067\046\044\055\046\056\055\064\024\065\071\066\013" +
    "\067\042\070\027\071\064\001\002\000\036\030\054\031" +
    "\020\032\051\033\036\034\067\046\044\055\046\056\055" +
    "\064\024\065\071\066\013\067\042\070\027\071\064\001" +
    "\002\000\036\030\054\031\020\032\051\033\036\034\067" +
    "\046\044\055\046\056\055\064\024\065\071\066\013\067" +
    "\042\070\027\071\064\001\002\000\036\030\054\031\020" +
    "\032\051\033\036\034\067\046\044\055\046\056\055\064" +
    "\024\065\071\066\013\067\042\070\027\071\064\001\002" +
    "\000\036\030\054\031\020\032\051\033\036\034\067\046" +
    "\044\055\046\056\055\064\024\065\071\066\013\067\042" +
    "\070\027\071\064\001\002\000\036\030\054\031\020\032" +
    "\051\033\036\034\067\046\044\055\046\056\055\064\024" +
    "\065\071\066\013\067\042\070\027\071\064\001\002\000" +
    "\036\030\054\031\020\032\051\033\036\034\067\046\044" +
    "\055\046\056\055\064\024\065\071\066\013\067\042\070" +
    "\027\071\064\001\002\000\036\030\054\031\020\032\051" +
    "\033\036\034\067\046\044\055\046\056\055\064\024\065" +
    "\071\066\013\067\042\070\027\071\064\001\002\000\036" +
    "\030\054\031\020\032\051\033\036\034\067\046\044\055" +
    "\046\056\055\064\024\065\071\066\013\067\042\070\027" +
    "\071\064\001\002\000\036\030\054\031\020\032\051\033" +
    "\036\034\067\046\044\055\046\056\055\064\024\065\071" +
    "\066\013\067\042\070\027\071\064\001\002\000\036\030" +
    "\054\031\020\032\051\033\036\034\067\046\044\055\046" +
    "\056\055\064\024\065\071\066\013\067\042\070\027\071" +
    "\064\001\002\000\036\030\054\031\020\032\051\033\036" +
    "\034\067\046\044\055\046\056\055\064\024\065\071\066" +
    "\013\067\042\070\027\071\064\001\002\000\036\030\054" +
    "\031\020\032\051\033\036\034\067\046\044\055\046\056" +
    "\055\064\024\065\071\066\013\067\042\070\027\071\064" +
    "\001\002\000\064\036\113\037\117\040\120\041\111\042" +
    "\112\043\107\044\077\045\103\047\106\050\121\051\100" +
    "\052\105\053\114\054\102\057\101\060\116\061\122\062" +
    "\110\063\115\072\uffe9\074\uffe9\076\uffe9\077\uffe9\100\uffe9" +
    "\103\uffe9\001\002\000\064\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd" +
    "\051\100\052\105\053\114\054\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\072\uffdd\074\uffdd\076\uffdd\077\uffdd" +
    "\100\uffdd\103\uffdd\001\002\000\060\036\113\037\117\042" +
    "\112\043\107\044\uffe4\045\uffe4\047\106\050\121\051\100" +
    "\052\105\053\114\054\uffe4\057\uffe4\060\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\072\uffe4\074\uffe4\076\uffe4\077\uffe4\100\uffe4" +
    "\103\uffe4\001\002\000\054\040\uffe1\041\uffe1\044\uffe1\045" +
    "\uffe1\047\106\050\121\051\100\052\105\053\114\054\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\072\uffe1\074" +
    "\uffe1\076\uffe1\077\uffe1\100\uffe1\103\uffe1\001\002\000\064" +
    "\036\113\037\117\040\120\041\111\042\112\043\107\044" +
    "\077\045\103\047\106\050\121\051\100\052\105\053\114" +
    "\054\102\057\101\060\116\061\122\062\110\063\115\072" +
    "\uffea\074\uffea\076\uffea\077\uffea\100\uffea\103\uffea\001\002" +
    "\000\064\036\113\037\117\040\120\041\111\042\112\043" +
    "\107\044\077\045\103\047\106\050\121\051\100\052\105" +
    "\053\114\054\102\057\101\060\116\061\122\062\110\063" +
    "\115\072\uffe7\074\uffe7\076\uffe7\077\uffe7\100\uffe7\103\uffe7" +
    "\001\002\000\064\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\uffda\045\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\057\uffda\060\uffda\061\uffda\062" +
    "\uffda\063\uffda\072\uffda\074\uffda\076\uffda\077\uffda\100\uffda" +
    "\103\uffda\001\002\000\054\040\uffe2\041\uffe2\044\uffe2\045" +
    "\uffe2\047\106\050\121\051\100\052\105\053\114\054\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\072\uffe2\074" +
    "\uffe2\076\uffe2\077\uffe2\100\uffe2\103\uffe2\001\002\000\054" +
    "\040\uffe0\041\uffe0\044\uffe0\045\uffe0\047\106\050\121\051" +
    "\100\052\105\053\114\054\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\072\uffe0\074\uffe0\076\uffe0\077\uffe0\100" +
    "\uffe0\103\uffe0\001\002\000\060\036\113\037\117\042\112" +
    "\043\107\044\uffe3\045\uffe3\047\106\050\121\051\100\052" +
    "\105\053\114\054\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\072\uffe3\074\uffe3\076\uffe3\077\uffe3\100\uffe3\103" +
    "\uffe3\001\002\000\064\036\113\037\117\040\120\041\111" +
    "\042\112\043\107\044\077\045\103\047\106\050\121\051" +
    "\100\052\105\053\114\054\102\057\101\060\116\061\122" +
    "\062\110\063\115\072\uffe8\074\uffe8\076\uffe8\077\uffe8\100" +
    "\uffe8\103\uffe8\001\002\000\054\040\uffdf\041\uffdf\044\uffdf" +
    "\045\uffdf\047\106\050\121\051\100\052\105\053\114\054" +
    "\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\072\uffdf" +
    "\074\uffdf\076\uffdf\077\uffdf\100\uffdf\103\uffdf\001\002\000" +
    "\064\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\047\uffde\050\uffde\051\100\052\105\053" +
    "\114\054\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde" +
    "\072\uffde\074\uffde\076\uffde\077\uffde\100\uffde\103\uffde\001" +
    "\002\000\064\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\072\uffdb\074\uffdb\076\uffdb\077\uffdb\100\uffdb\103" +
    "\uffdb\001\002\000\120\003\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\046\uffb1\055\uffb1\056\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\075\uffb1\076\uffb1\100\uffb1\101" +
    "\uffb1\102\uffb1\104\uffb1\001\002\000\064\036\113\037\117" +
    "\040\120\041\111\042\112\043\107\044\077\045\uffe6\047" +
    "\106\050\121\051\100\052\105\053\114\054\uffe6\057\uffe6" +
    "\060\uffe6\061\uffe6\062\uffe6\063\uffe6\072\uffe6\074\uffe6\076" +
    "\uffe6\077\uffe6\100\uffe6\103\uffe6\001\002\000\064\036\113" +
    "\037\117\040\120\041\111\042\112\043\107\044\077\045" +
    "\103\047\106\050\121\051\100\052\105\053\114\054\102" +
    "\057\101\060\116\061\122\062\110\063\115\072\uffec\074" +
    "\uffec\076\uffec\077\uffec\100\uffec\103\uffec\001\002\000\064" +
    "\036\113\037\117\040\120\041\111\042\112\043\107\044" +
    "\077\045\103\047\106\050\121\051\100\052\105\053\114" +
    "\054\102\057\101\060\116\061\122\062\110\063\115\072" +
    "\uffeb\074\uffeb\076\uffeb\077\uffeb\100\uffeb\103\uffeb\001\002" +
    "\000\064\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\072\uffdc\074\uffdc\076\uffdc\077\uffdc\100\uffdc\103\uffdc" +
    "\001\002\000\064\036\113\037\117\040\120\041\111\042" +
    "\112\043\107\044\uffe5\045\uffe5\047\106\050\121\051\100" +
    "\052\105\053\114\054\uffe5\057\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\072\uffe5\074\uffe5\076\uffe5\077\uffe5\100\uffe5" +
    "\103\uffe5\001\002\000\120\003\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\046\ufff0\055\ufff0\056\ufff0\064\ufff0\065\ufff0\066" +
    "\ufff0\067\ufff0\070\ufff0\071\ufff0\075\ufff0\076\ufff0\100\ufff0" +
    "\101\ufff0\102\ufff0\104\ufff0\001\002\000\052\036\113\037" +
    "\117\040\120\041\111\042\112\043\107\044\077\045\103" +
    "\047\106\050\121\051\100\052\105\053\114\054\102\057" +
    "\101\060\116\061\122\062\110\063\115\072\151\001\002" +
    "\000\064\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\072\uffcd\074\uffcd\076\uffcd\077\uffcd\100\uffcd\103\uffcd" +
    "\001\002\000\004\012\uffa6\001\002\000\036\030\054\031" +
    "\020\032\051\033\036\034\067\046\044\055\046\056\055" +
    "\064\024\065\071\066\013\067\042\070\027\071\064\001" +
    "\002\000\052\036\113\037\117\040\120\041\111\042\112" +
    "\043\107\044\077\045\103\047\106\050\121\051\100\052" +
    "\105\053\114\054\102\057\101\060\116\061\122\062\110" +
    "\063\115\072\155\001\002\000\004\075\011\001\002\000" +
    "\120\003\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\046\uffb2\055" +
    "\uffb2\056\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2" +
    "\071\uffb2\075\uffb2\076\uffb2\100\uffb2\101\uffb2\102\uffb2\104" +
    "\uffb2\001\002\000\116\003\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\046" +
    "\ufffd\055\ufffd\056\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd" +
    "\070\ufffd\071\ufffd\075\ufffd\076\ufffd\100\ufffd\101\ufffd\102" +
    "\ufffd\104\ufffd\001\002\000\122\003\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\046\uffff\055\uffff\056\uffff\064\uffff" +
    "\065\uffff\066\uffff\067\uffff\070\uffff\071\uffff\075\uffff\076" +
    "\uffff\100\uffff\101\uffff\102\uffff\104\uffff\001\002\000\064" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\072" +
    "\uffd7\074\uffd7\076\uffd7\077\uffd7\100\uffd7\103\uffd7\001\002" +
    "\000\036\030\054\031\020\032\051\033\036\034\067\046" +
    "\044\055\046\056\055\064\024\065\071\066\013\067\042" +
    "\070\027\071\064\001\002\000\052\036\113\037\117\040" +
    "\120\041\111\042\112\043\107\044\077\045\103\047\106" +
    "\050\121\051\100\052\105\053\114\054\102\057\101\060" +
    "\116\061\122\062\110\063\115\072\164\001\002\000\064" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\072" +
    "\uffca\074\uffca\076\uffca\077\uffca\100\uffca\103\uffca\001\002" +
    "\000\036\030\054\031\020\032\051\033\036\034\067\046" +
    "\044\055\046\056\055\064\024\065\071\066\013\067\042" +
    "\070\027\071\064\001\002\000\052\036\113\037\117\040" +
    "\120\041\111\042\112\043\107\044\077\045\103\047\106" +
    "\050\121\051\100\052\105\053\114\054\102\057\101\060" +
    "\116\061\122\062\110\063\115\072\167\001\002\000\064" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\072" +
    "\uffc7\074\uffc7\076\uffc7\077\uffc7\100\uffc7\103\uffc7\001\002" +
    "\000\120\003\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\046\uffed" +
    "\055\uffed\056\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070" +
    "\uffed\071\uffed\075\uffed\076\uffed\100\uffed\101\uffed\102\uffed" +
    "\104\uffed\001\002\000\064\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\072\uffd8\074\uffd8\076\uffd8\077\uffd8" +
    "\100\uffd8\103\uffd8\001\002\000\004\064\173\001\002\000" +
    "\004\071\174\001\002\000\020\022\022\023\040\024\047" +
    "\025\061\026\041\027\026\072\177\001\002\000\006\072" +
    "\210\103\207\001\002\000\004\077\205\001\002\000\006" +
    "\075\uff96\077\202\001\002\000\006\072\uffa0\103\uffa0\001" +
    "\002\000\004\075\011\001\002\000\016\022\022\023\040" +
    "\024\047\025\061\026\041\027\026\001\002\000\004\075" +
    "\uff97\001\002\000\120\003\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\046\uffa9\055\uffa9\056\uffa9\064\uffa9\065\uffa9\066\uffa9" +
    "\067\uffa9\070\uffa9\071\uffa9\075\uffa9\076\uffa9\100\uffa9\101" +
    "\uffa9\102\uffa9\104\uffa9\001\002\000\004\064\206\001\002" +
    "\000\006\072\uff9e\103\uff9e\001\002\000\016\022\022\023" +
    "\040\024\047\025\061\026\041\027\026\001\002\000\006" +
    "\075\uff96\077\202\001\002\000\004\075\011\001\002\000" +
    "\120\003\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\046\uffaa\055" +
    "\uffaa\056\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa" +
    "\071\uffaa\075\uffaa\076\uffaa\100\uffaa\101\uffaa\102\uffaa\104" +
    "\uffaa\001\002\000\006\072\uff9f\103\uff9f\001\002\000\064" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\054\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\072" +
    "\uffd9\074\uffd9\076\uffd9\077\uffd9\100\uffd9\103\uffd9\001\002" +
    "\000\120\003\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\046\uffee" +
    "\055\uffee\056\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070" +
    "\uffee\071\uffee\075\uffee\076\uffee\100\uffee\101\uffee\102\uffee" +
    "\104\uffee\001\002\000\052\036\113\037\117\040\120\041" +
    "\111\042\112\043\107\044\077\045\103\047\106\050\121" +
    "\051\100\052\105\053\114\054\102\057\101\060\116\061" +
    "\122\062\110\063\115\100\217\001\002\000\120\003\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\046\ufff1\055\ufff1\056\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\075" +
    "\ufff1\076\ufff1\100\ufff1\101\ufff1\102\ufff1\104\ufff1\001\002" +
    "\000\036\030\054\031\020\032\051\033\036\034\067\046" +
    "\044\055\046\056\055\064\024\065\071\066\013\067\042" +
    "\070\027\071\064\001\002\000\052\036\113\037\117\040" +
    "\120\041\111\042\112\043\107\044\077\045\103\047\106" +
    "\050\121\051\100\052\105\053\114\054\102\057\101\060" +
    "\116\061\122\062\110\063\115\072\222\001\002\000\114" +
    "\003\037\006\015\007\025\010\063\011\035\012\uffa1\013" +
    "\033\014\032\016\014\017\023\020\057\021\072\022\022" +
    "\023\040\024\047\025\061\026\041\027\026\030\054\031" +
    "\020\032\051\033\036\034\067\046\044\055\046\056\055" +
    "\064\024\065\071\066\013\067\042\070\027\071\064\075" +
    "\011\100\034\101\043\102\053\104\050\001\002\000\120" +
    "\003\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\224\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\046\uffba\055\uffba" +
    "\056\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071" +
    "\uffba\075\uffba\076\uffba\100\uffba\101\uffba\102\uffba\104\uffba" +
    "\001\002\000\114\003\037\006\015\007\025\010\063\011" +
    "\035\012\uffa1\013\033\014\032\016\014\017\023\020\057" +
    "\021\072\022\022\023\040\024\047\025\061\026\041\027" +
    "\026\030\054\031\020\032\051\033\036\034\067\046\044" +
    "\055\046\056\055\064\024\065\071\066\013\067\042\070" +
    "\027\071\064\075\011\100\034\101\043\102\053\104\050" +
    "\001\002\000\120\003\uffbb\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\046\uffbb\055\uffbb\056\uffbb\064\uffbb\065\uffbb\066\uffbb\067" +
    "\uffbb\070\uffbb\071\uffbb\075\uffbb\076\uffbb\100\uffbb\101\uffbb" +
    "\102\uffbb\104\uffbb\001\002\000\004\012\uffa7\001\002\000" +
    "\064\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\072\uffd5\074\uffd5\076\uffd5\077\uffd5\100\uffd5\103\uffd5\001" +
    "\002\000\040\030\054\031\020\032\051\033\036\034\067" +
    "\046\044\055\046\056\055\064\024\065\071\066\013\067" +
    "\042\070\027\071\064\072\235\001\002\000\036\030\054" +
    "\031\020\032\051\033\036\034\067\046\044\055\046\056" +
    "\055\064\024\065\071\066\013\067\042\070\027\071\064" +
    "\001\002\000\064\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\057\uffd6\060\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\072\uffd6\074\uffd6\076\uffd6\077\uffd6\100\uffd6" +
    "\103\uffd6\001\002\000\052\036\113\037\117\040\120\041" +
    "\111\042\112\043\107\044\077\045\103\047\106\050\121" +
    "\051\100\052\105\053\114\054\102\057\101\060\116\061" +
    "\122\062\110\063\115\074\234\001\002\000\064\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\072\uffc9\074" +
    "\uffc9\076\uffc9\077\uffc9\100\uffc9\103\uffc9\001\002\000\064" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\072" +
    "\uffcb\074\uffcb\076\uffcb\077\uffcb\100\uffcb\103\uffcb\001\002" +
    "\000\054\036\113\037\117\040\120\041\111\042\112\043" +
    "\107\044\077\045\103\047\106\050\121\051\100\052\105" +
    "\053\114\054\102\057\101\060\116\061\122\062\110\063" +
    "\115\072\uffc5\103\uffc5\001\002\000\006\072\241\103\240" +
    "\001\002\000\036\030\054\031\020\032\051\033\036\034" +
    "\067\046\044\055\046\056\055\064\024\065\071\066\013" +
    "\067\042\070\027\071\064\001\002\000\064\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\072\uffcc\074\uffcc" +
    "\076\uffcc\077\uffcc\100\uffcc\103\uffcc\001\002\000\054\036" +
    "\113\037\117\040\120\041\111\042\112\043\107\044\077" +
    "\045\103\047\106\050\121\051\100\052\105\053\114\054" +
    "\102\057\101\060\116\061\122\062\110\063\115\072\uffc6" +
    "\103\uffc6\001\002\000\054\022\022\023\040\024\047\025" +
    "\061\026\041\027\026\030\054\031\020\032\051\033\036" +
    "\034\067\046\044\055\046\056\055\064\024\065\071\066" +
    "\013\067\042\070\027\071\064\100\uffad\001\002\000\004" +
    "\064\256\001\002\000\004\100\247\001\002\000\052\036" +
    "\113\037\117\040\120\041\111\042\112\043\107\044\077" +
    "\045\103\047\106\050\121\051\100\052\105\053\114\054" +
    "\102\057\101\060\116\061\122\062\110\063\115\100\uffae" +
    "\001\002\000\036\030\054\031\020\032\051\033\036\034" +
    "\067\046\044\055\046\056\055\064\024\065\071\066\013" +
    "\067\042\070\027\071\064\001\002\000\052\036\113\037" +
    "\117\040\120\041\111\042\112\043\107\044\077\045\103" +
    "\047\106\050\121\051\100\052\105\053\114\054\102\057" +
    "\101\060\116\061\122\062\110\063\115\100\251\001\002" +
    "\000\040\030\054\031\020\032\051\033\036\034\067\046" +
    "\044\055\046\056\055\064\024\065\071\066\013\067\042" +
    "\070\027\071\064\072\uffab\001\002\000\004\072\254\001" +
    "\002\000\052\036\113\037\117\040\120\041\111\042\112" +
    "\043\107\044\077\045\103\047\106\050\121\051\100\052" +
    "\105\053\114\054\102\057\101\060\116\061\122\062\110" +
    "\063\115\072\uffac\001\002\000\004\075\011\001\002\000" +
    "\120\003\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\046\uffb0\055" +
    "\uffb0\056\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0" +
    "\071\uffb0\075\uffb0\076\uffb0\100\uffb0\101\uffb0\102\uffb0\104" +
    "\uffb0\001\002\000\004\054\257\001\002\000\036\030\054" +
    "\031\020\032\051\033\036\034\067\046\044\055\046\056" +
    "\055\064\024\065\071\066\013\067\042\070\027\071\064" +
    "\001\002\000\052\036\113\037\117\040\120\041\111\042" +
    "\112\043\107\044\077\045\103\047\106\050\121\051\100" +
    "\052\105\053\114\054\102\057\101\060\116\061\122\062" +
    "\110\063\115\100\uffaf\001\002\000\036\030\054\031\020" +
    "\032\051\033\036\034\067\046\044\055\046\056\055\064" +
    "\024\065\071\066\013\067\042\070\027\071\064\001\002" +
    "\000\052\036\113\037\117\040\120\041\111\042\112\043" +
    "\107\044\077\045\103\047\106\050\121\051\100\052\105" +
    "\053\114\054\102\057\101\060\116\061\122\062\110\063" +
    "\115\072\263\001\002\000\064\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\072\uffc8\074\uffc8\076\uffc8\077" +
    "\uffc8\100\uffc8\103\uffc8\001\002\000\010\054\300\073\302" +
    "\100\301\001\002\000\004\074\266\001\002\000\004\064" +
    "\267\001\002\000\006\054\270\100\271\001\002\000\004" +
    "\035\272\001\002\000\120\003\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\046\uffc1\055\uffc1\056\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\067\uffc1\070\uffc1\071\uffc1\075\uffc1\076\uffc1\100\uffc1" +
    "\101\uffc1\102\uffc1\104\uffc1\001\002\000\016\022\022\023" +
    "\040\024\047\025\061\026\041\027\026\001\002\000\004" +
    "\073\274\001\002\000\036\030\054\031\020\032\051\033" +
    "\036\034\067\046\044\055\046\056\055\064\024\065\071" +
    "\066\013\067\042\070\027\071\064\001\002\000\052\036" +
    "\113\037\117\040\120\041\111\042\112\043\107\044\077" +
    "\045\103\047\106\050\121\051\100\052\105\053\114\054" +
    "\102\057\101\060\116\061\122\062\110\063\115\074\276" +
    "\001\002\000\004\100\277\001\002\000\120\003\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\046\uffbf\055\uffbf\056\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\075\uffbf" +
    "\076\uffbf\100\uffbf\101\uffbf\102\uffbf\104\uffbf\001\002\000" +
    "\036\030\054\031\020\032\051\033\036\034\067\046\044" +
    "\055\046\056\055\064\024\065\071\066\013\067\042\070" +
    "\027\071\064\001\002\000\120\003\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\046\uffc4\055\uffc4\056\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\071\uffc4\075\uffc4\076\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\104\uffc4\001\002\000\004\074\303" +
    "\001\002\000\006\054\304\100\305\001\002\000\004\075" +
    "\307\001\002\000\120\003\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\046\uffc2\055\uffc2\056\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\070\uffc2\071\uffc2\075\uffc2\076\uffc2\100\uffc2\101" +
    "\uffc2\102\uffc2\104\uffc2\001\002\000\004\100\315\001\002" +
    "\000\036\030\054\031\020\032\051\033\036\034\067\046" +
    "\044\055\046\056\055\064\024\065\071\066\013\067\042" +
    "\070\027\071\064\001\002\000\006\076\313\103\312\001" +
    "\002\000\054\036\113\037\117\040\120\041\111\042\112" +
    "\043\107\044\077\045\103\047\106\050\121\051\100\052" +
    "\105\053\114\054\102\057\101\060\116\061\122\062\110" +
    "\063\115\076\uffbc\103\uffbc\001\002\000\036\030\054\031" +
    "\020\032\051\033\036\034\067\046\044\055\046\056\055" +
    "\064\024\065\071\066\013\067\042\070\027\071\064\001" +
    "\002\000\004\100\uffbe\001\002\000\054\036\113\037\117" +
    "\040\120\041\111\042\112\043\107\044\077\045\103\047" +
    "\106\050\121\051\100\052\105\053\114\054\102\057\101" +
    "\060\116\061\122\062\110\063\115\076\uffbd\103\uffbd\001" +
    "\002\000\120\003\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\046" +
    "\uffc0\055\uffc0\056\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\070\uffc0\071\uffc0\075\uffc0\076\uffc0\100\uffc0\101\uffc0\102" +
    "\uffc0\104\uffc0\001\002\000\052\036\113\037\117\040\120" +
    "\041\111\042\112\043\107\044\077\045\103\047\106\050" +
    "\121\051\100\052\105\053\114\054\102\057\101\060\116" +
    "\061\122\062\110\063\115\100\317\001\002\000\120\003" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\046\uffc3\055\uffc3\056" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\075\uffc3\076\uffc3\100\uffc3\101\uffc3\102\uffc3\104\uffc3\001" +
    "\002\000\004\012\uffa8\001\002\000\036\030\054\031\020" +
    "\032\051\033\036\034\067\046\044\055\046\056\055\064" +
    "\024\065\071\066\013\067\042\070\027\071\064\001\002" +
    "\000\052\036\113\037\117\040\120\041\111\042\112\043" +
    "\107\044\077\045\103\047\106\050\121\051\100\052\105" +
    "\053\114\054\102\057\101\060\116\061\122\062\110\063" +
    "\115\072\323\001\002\000\004\075\324\001\002\000\040" +
    "\030\054\031\020\032\051\033\036\034\067\046\044\055" +
    "\046\056\055\064\024\065\071\066\013\067\042\070\027" +
    "\071\064\076\uffb6\001\002\000\042\015\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\046\uffb5\055\uffb5\056\uffb5" +
    "\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\076" +
    "\uffb5\001\002\000\004\076\337\001\002\000\042\015\333" +
    "\030\054\031\020\032\051\033\036\034\067\046\044\055" +
    "\046\056\055\064\024\065\071\066\013\067\042\070\027" +
    "\071\064\076\uffb8\001\002\000\052\036\113\037\117\040" +
    "\120\041\111\042\112\043\107\044\077\045\103\047\106" +
    "\050\121\051\100\052\105\053\114\054\102\057\101\060" +
    "\116\061\122\062\110\063\115\077\331\001\002\000\114" +
    "\003\037\006\015\007\025\010\063\011\035\012\uffa1\013" +
    "\033\014\032\016\014\017\023\020\057\021\072\022\022" +
    "\023\040\024\047\025\061\026\041\027\026\030\054\031" +
    "\020\032\051\033\036\034\067\046\044\055\046\056\055" +
    "\064\024\065\071\066\013\067\042\070\027\071\064\075" +
    "\011\100\034\101\043\102\053\104\050\001\002\000\042" +
    "\015\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\046" +
    "\uffb3\055\uffb3\056\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3" +
    "\070\uffb3\071\uffb3\076\uffb3\001\002\000\004\077\335\001" +
    "\002\000\042\015\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\046\uffb4\055\uffb4\056\uffb4\064\uffb4\065\uffb4\066" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\076\uffb4\001\002\000\114" +
    "\003\037\006\015\007\025\010\063\011\035\012\uffa1\013" +
    "\033\014\032\016\014\017\023\020\057\021\072\022\022" +
    "\023\040\024\047\025\061\026\041\027\026\030\054\031" +
    "\020\032\051\033\036\034\067\046\044\055\046\056\055" +
    "\064\024\065\071\066\013\067\042\070\027\071\064\075" +
    "\011\100\034\101\043\102\053\104\050\001\002\000\004" +
    "\076\uffb7\001\002\000\120\003\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\046\uffb9\055\uffb9\056\uffb9\064\uffb9\065\uffb9\066" +
    "\uffb9\067\uffb9\070\uffb9\071\uffb9\075\uffb9\076\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\104\uffb9\001\002\000\004\064\341\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\007\001\001" +
    "\000\002\001\001\000\034\003\055\004\020\005\064\006" +
    "\051\007\016\012\011\013\015\014\065\015\057\016\030" +
    "\021\027\025\044\026\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\156\005\064\006\051\007\016\012\011\013" +
    "\015\014\065\015\057\016\030\021\027\025\044\026\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\075\001\001\000\002\001\001\000\004\026\145\001\001" +
    "\000\004\026\144\001\001\000\004\026\143\001\001\000" +
    "\004\026\142\001\001\000\004\026\141\001\001\000\002" +
    "\001\001\000\004\026\137\001\001\000\004\026\136\001" +
    "\001\000\004\026\135\001\001\000\004\026\134\001\001" +
    "\000\004\026\133\001\001\000\004\026\132\001\001\000" +
    "\004\026\131\001\001\000\004\026\130\001\001\000\004" +
    "\026\127\001\001\000\004\026\126\001\001\000\004\026" +
    "\125\001\001\000\004\026\124\001\001\000\004\026\123" +
    "\001\001\000\004\026\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\153\001\001\000\002\001\001\000\004\005" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\175\022\174\023\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\200\001\001\000\002\001\001" +
    "\000\004\005\203\001\001\000\004\007\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\175\023\212\001\001\000\004\024" +
    "\210\001\001\000\004\005\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\220\001\001" +
    "\000\002\001\001\000\032\004\222\005\064\006\051\007" +
    "\016\012\011\013\015\014\065\015\057\016\030\021\027" +
    "\025\044\026\067\001\001\000\002\001\001\000\032\004" +
    "\224\005\064\006\051\007\016\012\011\013\015\014\065" +
    "\015\057\016\030\021\027\025\044\026\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\235\027\236\001\001\000\004\026\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\243\017\244\026\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\247\001\001" +
    "\000\002\001\001\000\006\020\251\026\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\257\001" +
    "\001\000\002\001\001\000\004\026\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\272\001\001\000\002\001" +
    "\001\000\004\026\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\307\026\310\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\327\030\325" +
    "\031\324\032\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\327\031\333\001\001\000\002\001\001" +
    "\000\032\004\331\005\064\006\051\007\016\012\011\013" +
    "\015\014\065\015\057\016\030\021\027\025\044\026\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\335\005\064\006\051\007\016\012\011" +
    "\013\015\014\065\015\057\016\030\021\027\025\044\026" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Lista para almacenar los errores sintácticos encontrados
    private List<String> syntaxErrors = new LinkedList<>();

    // Método mejorado para reportar errores sintácticos con línea y columna
    public void syntax_error(Symbol cur_token) {
        String errorMsg = String.format(
            "Error Sintáctico en línea %d, columna %d: Token inesperado '%s'",
            cur_token.left + 1,
            cur_token.right + 1,
            cur_token.value != null ? cur_token.value : sym.terminalNames[cur_token.sym]
        );
        syntaxErrors.add(errorMsg);
    }

    public void report_error(String message, Object info) {
        syntaxErrors.add("Error Sintáctico: " + message);
    }
    
    public List<String> getSyntaxErrors() {
        return syntaxErrors;
    }

    private Symbol lastErrorSymbol;
    public Symbol getLastErrorSymbol() {
        return lastErrorSymbol;
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        lastErrorSymbol = cur_token;
        syntaxErrors.add(String.format(
            "Error sintáctico irrecuperable en línea %d, columna %d: Token '%s'",
            cur_token.left + 1,
            cur_token.right + 1,
            cur_token.value != null ? cur_token.value : sym.terminalNames[cur_token.sym]
        ));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO_PROGRAMA IDENTIFICADOR BLOQUE_SENTENCIAS FIN_PROGRAMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_SENTENCIAS ::= LLAVE_APERTURA LISTA_SENTENCIAS LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE_SENTENCIAS ::= LLAVE_APERTURA LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= BLOQUE_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= ESTRUCTURA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= ESTRUCTURA_WHEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= ESTRUCTURA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ESTRUCTURA_DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DEFINICION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= COMENTARIO_MULTILINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= RETORNO EXPRESION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= EXPRESION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		 parser.report_error("Sentencia inválida omitida", null); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= ERROR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION ASIGNACION_VALOR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION SUMA_Y_ASIGNACION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= EXPRESION RESTA_Y_ASIGNACION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION MULTIPLICACION_Y_ASIGNACION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= EXPRESION DIVISION_Y_ASIGNACION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= EXPRESION MODULO_Y_ASIGNACION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION IGUAL_A EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION DIFERENTE_DE EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION MAYOR_QUE EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION MENOR_QUE EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION SUMA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION RESTA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= NEGACION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= OPERADOR_INCREMENTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= OPERADOR_DECREMENTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= IDENTIFICADOR OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= IDENTIFICADOR OPERADOR_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= NUMERODECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= PARENTESIS_APERTURA EXPRESION PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= IDENTIFICADOR PARENTESIS_APERTURA LISTA_ARGUMENTOS PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= ENTRADA PARENTESIS_APERTURA EXPRESION PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= IDENTIFICADOR CORCHETE_APERTURA EXPRESION CORCHETE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= IMPRIMIR PARENTESIS_APERTURA EXPRESION PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= IMPRIMIR_CON_SALTO PARENTESIS_APERTURA EXPRESION PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_ARGUMENTOS ::= LISTA_ARGUMENTOS COMA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ARGUMENTOS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_ARGUMENTOS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ARGUMENTOS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= TIPO IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= TIPO IDENTIFICADOR ASIGNACION_VALOR EXPRESION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= TIPO IDENTIFICADOR CORCHETE_APERTURA CORCHETE_CIERRE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= TIPO CORCHETE_APERTURA CORCHETE_CIERRE IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= TIPO IDENTIFICADOR CORCHETE_APERTURA CORCHETE_CIERRE ASIGNACION_VALOR INICIALIZADOR_ARREGLO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= TIPO CORCHETE_APERTURA CORCHETE_CIERRE IDENTIFICADOR ASIGNACION_VALOR NEW TIPO CORCHETE_APERTURA EXPRESION CORCHETE_CIERRE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INICIALIZADOR_ARREGLO ::= LLAVE_APERTURA LISTA_EXPRESIONES LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR_ARREGLO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES COMA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ESTRUCTURA_IF ::= IF PARENTESIS_APERTURA EXPRESION PARENTESIS_CIERRE SENTENCIA ELSE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ESTRUCTURA_IF ::= IF PARENTESIS_APERTURA EXPRESION PARENTESIS_CIERRE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ESTRUCTURA_WHEN ::= WHEN PARENTESIS_APERTURA EXPRESION PARENTESIS_CIERRE LLAVE_APERTURA CUERPO_WHEN LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHEN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUERPO_WHEN ::= LISTA_CASOS_WHEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_WHEN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPO_WHEN ::= LISTA_CASOS_WHEN ELSE DOS_PUNTOS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_WHEN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPO_WHEN ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_WHEN",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA_CASOS_WHEN ::= CASO_WHEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS_WHEN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_CASOS_WHEN ::= LISTA_CASOS_WHEN CASO_WHEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS_WHEN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASO_WHEN ::= EXPRESION DOS_PUNTOS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO_WHEN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ESTRUCTURA_WHILE ::= WHILE PARENTESIS_APERTURA EXPRESION PARENTESIS_CIERRE BLOQUE_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ESTRUCTURA_DO_WHILE ::= DO BLOQUE_SENTENCIAS WHILE PARENTESIS_APERTURA EXPRESION PARENTESIS_CIERRE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ESTRUCTURA_FOR ::= FOR PARENTESIS_APERTURA INICIALIZACION_FOR PUNTO_COMA EXPRESION PUNTO_COMA ACTUALIZACION_FOR PARENTESIS_CIERRE BLOQUE_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INICIALIZACION_FOR ::= TIPO IDENTIFICADOR ASIGNACION_VALOR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZACION_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INICIALIZACION_FOR ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZACION_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INICIALIZACION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZACION_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACTUALIZACION_FOR ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION_FOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACTUALIZACION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION_FOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DEFINICION_FUNCION ::= MODIFICADORES FUNCION IDENTIFICADOR PARENTESIS_APERTURA LISTA_PARAMETROS PARENTESIS_CIERRE TIPO_RETORNO BLOQUE_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICION_FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DEFINICION_FUNCION ::= MODIFICADORES FUNCION IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE TIPO_RETORNO BLOQUE_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICION_FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MODIFICADORES ::= PUBLICO ESTATICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MODIFICADORES ::= PRIVADO ESTATICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MODIFICADORES ::= PROTEGIDO ESTATICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MODIFICADORES ::= PUBLICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MODIFICADORES ::= PRIVADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MODIFICADORES ::= PROTEGIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MODIFICADORES ::= ESTATICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MODIFICADORES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTA_PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTA_PARAMETROS ::= LISTA_PARAMETROS COMA PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMETRO ::= TIPO DOS_PUNTOS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPO ::= TIPO_INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPO ::= TIPO_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPO ::= TIPO_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPO ::= TIPO_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPO ::= TIPO_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO ::= TIPO_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO_RETORNO ::= DOS_PUNTOS TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO_RETORNO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
